<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net6.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <LangVersion>11</LangVersion>
        <Company>Atypical Consulting SRL</Company>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <DefaultDocumentationFolder>../../docs/api</DefaultDocumentationFolder>
        <DefaultDocumentationLinksOutputFile>../../docs/links</DefaultDocumentationLinksOutputFile>
        <DefaultDocumentationAssemblyPageName>VirtualFileSystem</DefaultDocumentationAssemblyPageName>
    </PropertyGroup>

    <!-- File inclusion -->
    <ItemGroup>
        <None Include="../../Logo.png" Pack="true" PackagePath="" />
        <None Include="../../LICENSE" Pack="true" PackagePath="" />
        <None Include="../../README.md" Pack="true" PackagePath="" />
    </ItemGroup>
    
    <!-- Development dependencies -->
    <ItemGroup>
      <PackageReference Include="DefaultDocumentation" Version="0.8.2">
        <PrivateAssets>all</PrivateAssets>
        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
      <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="7.0.0" />
    </ItemGroup>

    <!-- NuGet metadata -->
    <PropertyGroup>
        <PackageId>Atypical.VirtualFileSystem</PackageId>
        <PackageIcon>Logo.png</PackageIcon>
        <PackageLicenseFile>LICENSE</PackageLicenseFile>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <Authors>Philippe Matray</Authors>
        <Description>
            A virtual file system implementation in modern C#.
            When writing applications in .NET, you often need to write or read the contents of a file. .NET provides `System.IO` namespace dedicated to this purpose. But how do we deal with the filesystem when testing our code?
            "Virtual File System" is an attempt to solve this problem. Currently, this library is at an early stage of development. If you need additional functionality, I invite you to open an issue to discuss it.
        </Description>
        <PackageTags>virtual filesystem;testing;core;net7</PackageTags>
        <Copyright>Copyright (c) 2022-2023 Atypical Consulting SRL</Copyright>
        <PackageProjectUrl>https://github.com/Atypical-Consulting/VirtualFileSystem</PackageProjectUrl>
        <RepositoryUrl>https://github.com/Atypical-Consulting/VirtualFileSystem.git</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <RepositoryBranch>main</RepositoryBranch>
        <PackageReleaseNotes>
            ## Changes
            - Update Copyright @phmatray (#25)
            - Create ServiceCollectionExtensionsTests.cs @phmatray (#24)
            - Introduce VFSException class @phmatray (#23)
            - Fix a group of broken tests (VFS.ToString method) @phmatray (#22)
            - Add virtual file system extension method @phmatray (#21)
            - Bump FluentAssertions from 6.8.0 to 6.9.0 @dependabot (#20)
            - Bump Microsoft.NET.Test.Sdk from 17.4.0 to 17.4.1 @dependabot (#19)
            - Use Markdown documentation @phmatray (#18)
            - Move and copy .editorconfig @phmatray (#15)
        </PackageReleaseNotes>
    </PropertyGroup>

    <!-- Versioning -->
    <!-- https://saebamini.com/how-to-version-your-net-nuget-packages-libraries-and-assemblies-azure-yaml-pipelines-example-using-net-core-cli/ -->
    <PropertyGroup>
        <Version>0.1.3</Version>
        <AssemblyVersion>0.1.3</AssemblyVersion>
        <FileVersion>0.1.3</FileVersion>
        <InformationalVersion>0.1.3</InformationalVersion>
    </PropertyGroup>

</Project>
